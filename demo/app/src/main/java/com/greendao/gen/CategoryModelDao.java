package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import la.xiong.tv.bean.CategoryModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY_MODEL".
*/
public class CategoryModelDao extends AbstractDao<CategoryModel, Long> {

    public static final String TABLENAME = "CATEGORY_MODEL";

    /**
     * Properties of entity CategoryModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Slug = new Property(3, String.class, "slug", false, "SLUG");
        public final static Property First_letter = new Property(4, String.class, "first_letter", false, "FIRST_LETTER");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Prompt = new Property(6, int.class, "prompt", false, "PROMPT");
        public final static Property Image = new Property(7, String.class, "image", false, "IMAGE");
        public final static Property Thumb = new Property(8, String.class, "thumb", false, "THUMB");
        public final static Property Priority = new Property(9, int.class, "priority", false, "PRIORITY");
        public final static Property Screen = new Property(10, int.class, "screen", false, "SCREEN");
        public final static Property Nickname = new Property(11, String.class, "nickname", false, "NICKNAME");
        public final static Property Video_url = new Property(12, String.class, "video_url", false, "VIDEO_URL");
        public final static Property Head_image = new Property(13, String.class, "head_image", false, "HEAD_IMAGE");
        public final static Property Url = new Property(14, String.class, "url", false, "URL");
        public final static Property Xinimg = new Property(15, String.class, "xinimg", false, "XINIMG");
        public final static Property Title = new Property(16, String.class, "title", false, "TITLE");
        public final static Property Img = new Property(17, String.class, "img", false, "IMG");
        public final static Property Play_url = new Property(18, String.class, "play_url", false, "PLAY_URL");
        public final static Property Address = new Property(19, String.class, "address", false, "ADDRESS");
    }


    public CategoryModelDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"SLUG\" TEXT," + // 3: slug
                "\"FIRST_LETTER\" TEXT," + // 4: first_letter
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"PROMPT\" INTEGER NOT NULL ," + // 6: prompt
                "\"IMAGE\" TEXT," + // 7: image
                "\"THUMB\" TEXT," + // 8: thumb
                "\"PRIORITY\" INTEGER NOT NULL ," + // 9: priority
                "\"SCREEN\" INTEGER NOT NULL ," + // 10: screen
                "\"NICKNAME\" TEXT," + // 11: nickname
                "\"VIDEO_URL\" TEXT," + // 12: video_url
                "\"HEAD_IMAGE\" TEXT," + // 13: head_image
                "\"URL\" TEXT," + // 14: url
                "\"XINIMG\" TEXT," + // 15: xinimg
                "\"TITLE\" TEXT," + // 16: title
                "\"IMG\" TEXT," + // 17: img
                "\"PLAY_URL\" TEXT," + // 18: play_url
                "\"ADDRESS\" TEXT);"); // 19: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CategoryModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(4, slug);
        }
 
        String first_letter = entity.getFirst_letter();
        if (first_letter != null) {
            stmt.bindString(5, first_letter);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getPrompt());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(9, thumb);
        }
        stmt.bindLong(10, entity.getPriority());
        stmt.bindLong(11, entity.getScreen());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(12, nickname);
        }
 
        String video_url = entity.getVideo_url();
        if (video_url != null) {
            stmt.bindString(13, video_url);
        }
 
        String head_image = entity.getHead_image();
        if (head_image != null) {
            stmt.bindString(14, head_image);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(15, url);
        }
 
        String xinimg = entity.getXinimg();
        if (xinimg != null) {
            stmt.bindString(16, xinimg);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(17, title);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(18, img);
        }
 
        String play_url = entity.getPlay_url();
        if (play_url != null) {
            stmt.bindString(19, play_url);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(20, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CategoryModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(4, slug);
        }
 
        String first_letter = entity.getFirst_letter();
        if (first_letter != null) {
            stmt.bindString(5, first_letter);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getPrompt());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(9, thumb);
        }
        stmt.bindLong(10, entity.getPriority());
        stmt.bindLong(11, entity.getScreen());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(12, nickname);
        }
 
        String video_url = entity.getVideo_url();
        if (video_url != null) {
            stmt.bindString(13, video_url);
        }
 
        String head_image = entity.getHead_image();
        if (head_image != null) {
            stmt.bindString(14, head_image);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(15, url);
        }
 
        String xinimg = entity.getXinimg();
        if (xinimg != null) {
            stmt.bindString(16, xinimg);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(17, title);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(18, img);
        }
 
        String play_url = entity.getPlay_url();
        if (play_url != null) {
            stmt.bindString(19, play_url);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(20, address);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CategoryModel readEntity(Cursor cursor, int offset) {
        CategoryModel entity = new CategoryModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // slug
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // first_letter
            cursor.getInt(offset + 5), // status
            cursor.getInt(offset + 6), // prompt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // thumb
            cursor.getInt(offset + 9), // priority
            cursor.getInt(offset + 10), // screen
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nickname
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // video_url
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // head_image
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // xinimg
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // title
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // img
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // play_url
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CategoryModel entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSlug(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirst_letter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setPrompt(cursor.getInt(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setThumb(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPriority(cursor.getInt(offset + 9));
        entity.setScreen(cursor.getInt(offset + 10));
        entity.setNickname(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVideo_url(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHead_image(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setXinimg(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTitle(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setImg(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPlay_url(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAddress(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CategoryModel entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CategoryModel entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CategoryModel entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
